/**
 * 注入代码
 * 用于非pi项目
 * 模拟pi_modules _$define
 */

window.pi_modules ={};
pi_modules["pi/browser/webview"] = {    // 构建webview路径
    exports:{}
};

pi_modules["pi/browser/webview"].exports.WebViewManager = (function () {
    var rpcID = -1;
    var rpcIDMap = {};

    /**
     * 往指定名字的WebView调用指定模块的导出方法
     * data: 指定对方WebView执行的模块和导出方法
     * callback：返回结果的回调函数
     * 注：RPC都是一来一回的结构，没有注册一次可以调用多次的结构！
     */
    var rpcCall = function (moduleName, methodName, param, callback) {
        console.log("rpcCall = ",moduleName);
        console.log("rpcCall = ",methodName);
        console.log("rpcCall = ",param);
        console.log("rpcCall = ",callback);
        var RPC_CALL_START = "$WEBVIEW_RPC_CALL: ";
        var RPC_CALLBACK_PARAM = "$WEBVIEW_RPC_FUNCTION_PARAM: ";

        var funcs = [callback];

        var id = ++rpcID;
        rpcIDMap[id] = funcs;

        var sign = {
            moduleName: moduleName, // 模块名
            methodName: methodName, // 模块的导出方法名
            params: [param, RPC_CALLBACK_PARAM + 0], // 参数组成的数组，这里参数的回调函数全部转成Callback ID
            rpcID: id // 可选：调用rpc前注册到Map的RPC ID
        };

        var data = RPC_CALL_START + JSON.stringify(sign);

        nativeCall("WebViewManager", "postWebViewMessage", 0, [
            "default",
            data
        ]);
    };

    var webViewManager = undefined;
    var webViewManagerCallWaits = [];

    var nativeCall = function (className, methodName, listenerID, args) {
        args = args || [];

        if (!webViewManager && methodName !== "init") {
            webViewManagerCallWaits.push([
                className,
                methodName,
                listenerID,
                args
            ]);
            return;
        }

        if (navigator.userAgent.indexOf("YINENG_ANDROID") >= 0) {
            window.JSBridge.postMessage(
                className,
                methodName,
                webViewManager || 0,
                listenerID,
                JSON.stringify(args)
            );
        } else if (navigator.userAgent.indexOf("YINENG_IOS") >= 0) {
            window.webkit.messageHandlers.Native.postMessage([
                className,
                methodName,
                webViewManager || 0,
                listenerID,
                ...args
            ]);
        }
    };

    window.handle_native_throwerror = function (className, methodName, message) {
        alert(
            "handle_Native_ThrowError, className = " +
            className +
            ", methodName = " +
            methodName +
            ", message = " +
            message
        );
    };

    window.handle_native_message = function (cbID, code, ...args) {
        if (cbID === 0) return;

        var cb = callIDMap[cbID];
        if (cb) {
            cb.apply(undefined, args);
            delete callIDMap[cbID];
        }
    };

    window.handle_native_event = function(err){
        console.log("handle_native_event called",err);
    }

    window["onWebViewPostMessage"] = function (fromWebView, message) {
        var RPC_REPLY_START = "$WEBVIEW_RPC_REPLY: ";
        // 收到对方的rpc回应，处理
        if (message.startsWith(RPC_REPLY_START)) {
            message = message.slice(RPC_REPLY_START.length);
            var data = JSON.parse(message);
            return handleRpcReply(data);
        }
    };

    var handleRpcReply = function (sign) {
        var funcs = rpcIDMap[sign.rpcID];
        var f = funcs && funcs[sign.callbackID];
        if (f) {
            f.apply(undefined, sign.args);
        }

        delete rpcIDMap[rpcID];
    };

    var callIDMax = 0;
    var callIDMap = {};

    var callID = ++callIDMax;
    callIDMap[callID] = function (id) {
        webViewManager = id;

        for (var i = 0; i < webViewManagerCallWaits.length; ++i) {
            (function (w) {
                setTimeout(() => {
                    nativeCall(w[0], w[1], w[2], w[3]);
                }, 0);
            })(webViewManagerCallWaits[i]);
        }

        webViewManagerCallWaits.length = 0;
    };

    nativeCall("WebViewManager", "init", callID);

    var rpc = function(webViewName, data){
        console.log("rpc = ",webViewName,data);
        rpcCall(data.moduleName,data.methodName,data.params[0],data.params[1]);
    }
    var WebViewManager = {rpc};
    return WebViewManager;
})();

pi_modules.commonjs = {
	id: 'commonjs',
	exports: undefined,
	loaded: true
};

pi_modules.commonjs.exports = (function () {
    var curryFirst = function (func, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
        return function (arg) {
            return func(arg, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        };
    };

    var relativePath = function (filePath /*:string*/, dir /*:string*/) {
        var i, len, j;
        if (filePath.charCodeAt(0) !== 46)
            return filePath;
        i = 0;
        len = filePath.length;
        j = dir.length - 1;
        if (dir.charCodeAt(j) !== 47) {
            j = dir.lastIndexOf("/");
        }
        while (i < len) {
            if (filePath.charCodeAt(i) !== 46)
                break;
            if (filePath.charCodeAt(i + 1) === 47) { // ./的情况
                i += 2;
                break;
            }
            if (filePath.charCodeAt(i + 1) !== 46 || filePath.charCodeAt(i + 2) !== 47)
                break;
            // ../的情况
            i += 3;
            j = dir.lastIndexOf("/", j - 1);
        }
        if (i > 0)
            filePath = filePath.slice(i);
        if (j < 0)
            return filePath;
        if (j < dir.length - 1)
            dir = dir.slice(0, j + 1);
        return dir + filePath;
    };

    var relativeBuild = function (modName, dir) {
        var path = relativePath(modName, dir);
        console.log("pi_modules = ",pi_modules);
        console.log("modName = ",modName);
        console.log("dir = ",dir);
        console.log("path = ",path);
        return pi_modules[path].exports;
    }

    /**
     * 模拟_$define方法,实现一个最简pi_modules
     * 依赖关系需要手动整理
     */
    self._$define = function (name, func) {
        pi_modules[name] = {
            exports:{}
        };
        func(curryFirst(relativeBuild, name),pi_modules[name].exports,{});
    };
})();




