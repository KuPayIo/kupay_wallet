import { hexstrToU8Array, str2U8Array, u8Array2Str } from '../../publicLib/tools';

/**
 * cipher
 */
declare var api;    // 底层挂到window上的对象

/**
 * u8数组转十六进制字符串
 * 
 * @param u8Array 输入数组
 */
const u8ArrayToHexstr = (u8Array: Uint8Array) => {
    let str = '';
    for (let i = 0; i < u8Array.length; i++) {
        str += Math.floor(u8Array[i] / 16).toString(16);
        str += (u8Array[i] % 16).toString(16);
        // str += u8Array[i].toString(16);
    }
    if (str[0] === '0') str = str.slice(1);

    return str;
};

// tslint:disable-next-line:no-unnecessary-class
export class Cipher {
    /**
     * Encrypt the plain text, returning a JSON string
     * 
     * @param  passwd Password used to encrypt the plainText
     * @param  plainText Text to be encrypted
     * @returns  JSON string
     */
    public static encrypt(passwd: string, plainText: string): string {
        const nonce = new Uint8Array(12);
        const key = this.sha256(passwd);
        crypto.getRandomValues(nonce);

        const res = api.cipher.rust_encrypt(key.slice(32), u8ArrayToHexstr(nonce), '', u8ArrayToHexstr(str2U8Array(plainText)));
        if (res[0] !== 0) throw new Error(`err code ${res[0]}`);  // 所有的res[0]不等于0表示有异常

        return res[1] + u8ArrayToHexstr(nonce);
    }

    /**
     * Decypt the encrypted text by `encrypt` method
     * 
     * @param  passwd Password to decrypt the cipherText
     * @param  cipherText Text to be decrypted. Generated by `encrypt` method
     * @returns  Decrypted plain text
     */
    public static decrypt(passwd: string, cipherText: string): string {
        const nonce = cipherText.slice(cipherText.length - 24, cipherText.length);
        const key = this.sha256(passwd);
        const res = api.cipher.rust_decrypt(key.slice(32), nonce, '', cipherText.slice(0,cipherText.length - 24));
        if (res[0] !== 0) throw new Error(`err code ${res[0]}`);  // 所有的res[0]不等于0表示有异常 

        return u8Array2Str(hexstrToU8Array(res[1]));
        // return res[1];
    }

    /**
     * sha256
     */
    public static sha256(data: string) {
        const res = api.cipher.rust_sha256(u8ArrayToHexstr(str2U8Array(data)));
        if (res[0] !== 0) throw new Error(`err code ${res[0]}`);  // 所有的res[0]不等于0表示有异常 

        return res[1];
    }

    public static sign(msg: string, privKey: string): string {
        const hash = this.sha256(msg);
        const res = api.cipher.rust_sign(privKey, hash);
        if (res[0] !== 0) throw new Error(`err code ${res[0]}`);  // 所有的res[0]不等于0表示有异常 

        return res[1];
    }
}