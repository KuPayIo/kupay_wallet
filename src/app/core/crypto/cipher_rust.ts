import { u8ArrayToHexstr } from '../../publicLib/tools';

/**
 * cipher
 */
declare var api;    // 底层挂到window上的对象

// tslint:disable-next-line:no-unnecessary-class
export class Cipher {
    /**
     * Encrypt the plain text, returning a JSON string
     * 
     * @param  passwd Password used to encrypt the plainText
     * @param  plainText Text to be encrypted
     * @returns  JSON string
     */
    public static encrypt(passwd: string, plainText: string): string {
        const nonce = new Uint8Array(12);
        const key = api.cipher.rust_sha256(passwd).slice(32);
        crypto.getRandomValues(nonce);

        const res = api.cipher.rust_encrypt(key, u8ArrayToHexstr(nonce), '', plainText);

        return res[0] + u8ArrayToHexstr(nonce);
    }

    /**
     * Decypt the encrypted text by `encrypt` method
     * 
     * @param  passwd Password to decrypt the cipherText
     * @param  cipherText Text to be decrypted. Generated by `encrypt` method
     * @returns  Decrypted plain text
     */
    public static decrypt(passwd: string, cipherText: string): string {
        const nonce = cipherText.slice(cipherText.length - 12, cipherText.length);
        const key = api.cipher.rust_sha256(passwd).slice(32);
        
        const res = api.cipher.rust_decrypt(key, nonce, '', cipherText.slice(cipherText.length - 12));

        return res[0];
    }

    /**
     * sha256
     */
    public static sha256(data: string) {
        const res = api.cipher.rust_sha256(data);

        return res[0];
    }

    public static sign(msg: string, privKey: string): string {
        const res = api.cipher.sign(msg, privKey);

        return res[0];
    }
}